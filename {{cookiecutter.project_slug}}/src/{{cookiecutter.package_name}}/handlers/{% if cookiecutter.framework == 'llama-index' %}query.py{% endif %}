"""LlamaIndex-based query handler."""
from whisk.kitchenai_sdk.kitchenai import KitchenAIApp
from whisk.kitchenai_sdk.schema import (
    WhiskQuerySchema,
    WhiskQueryBaseResponseSchema,
    TokenCountSchema
)
from llama_index.core import VectorStoreIndex
from llama_index.core.vector_stores.types import MetadataFilter, MetadataFilters
from ..utils.logging import logger
from .vector_store import VectorStoreManager

class QueryHandler:
    """LlamaIndex Query Handler for RAG-based question answering."""
    def __init__(self, kitchen: KitchenAIApp):
        self.kitchen = kitchen
        self.vector_store = VectorStoreManager()
        self._register_handlers()

    def _register_handlers(self):
        self.kitchen.query.handler("query")(self.handle_query)

    async def handle_query(self, data: WhiskQuerySchema) -> WhiskQueryBaseResponseSchema:
        """Handle RAG query using LlamaIndex."""
        try:
            # Create filters from metadata if provided
            filters = None
            if data.metadata:
                filter_list = [
                    MetadataFilter(key=key, value=value)
                    for key, value in data.metadata.items()
                ]
                filters = MetadataFilters(filters=filter_list)

            # Create index and query engine
            index = VectorStoreIndex.from_vector_store(self.vector_store.store)
            query_engine = index.as_query_engine(
                chat_mode="best",
                filters=filters,
                llm=self.vector_store.llm,
                verbose=True
            )

            # Execute query
            response = await query_engine.aquery(data.query)

            # Get token counts
            token_counts = self.vector_store.get_token_counts()

            return WhiskQueryBaseResponseSchema.from_llama_response(
                data,
                response,
                token_counts=TokenCountSchema(**token_counts),
                metadata={"token_counts": token_counts, **data.metadata} if data.metadata else {"token_counts": token_counts}
            )
        except Exception as e:
            logger.error(f"Error in query handler: {str(e)}")
            raise 